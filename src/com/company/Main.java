package com.company;

import java.util.*;

public class Main {

    private static Map<String, Integer> compute(final String text) {

        int charCounter = 0;//переменная для счета символов
        int spaceCounter = 0;//переменная для счета пробелов


//Заполняю пустую карту вставляя текст через regex, лямбду, условие тернарного выражения и заполняю её ----------------
        if (text == null || text.length() == 0) {
            return Collections.emptyMap();
        }
        Map<String, Integer> out = new TreeMap<>();
        for (String item : text.replaceAll("\\.|—|\\d|\"|\\,|\\(|\\)|\\?|\\!|\\;", "").replaceAll("\\s{2,}", " ").trim().split(" ")) {
            out.compute(item, (k, v) -> v == null ? 1 : ++v);//заполнение карты, присвоение значения
        }
        System.out.println('\n' + "Колличество слов в тексте =" + out.size() + ";" + '\n');//вывожу колличество слов в тексте через размерность карты


// Создаю набор уникальных пар с сортировкой по компаратору через анонимный класс, сортировка по ЗНАЧЕНИЮ пары ключ-значение-----------
        SortedSet<Map.Entry<String, Integer>> sortedEntries = new TreeSet<Map.Entry<String, Integer>>(new Comparator<Map.Entry<String, Integer>>() {
            @Override
            public int compare(Map.Entry<String, Integer> e1, Map.Entry<String, Integer> e2) {
                int res = e1.getValue().compareTo(e2.getValue());
                return res != -1 ? res : -1;
            }
        });

        sortedEntries.addAll(out.entrySet());//вставляю пары ключ-значение для сортировки по значению

        SortedSet<Map.Entry<String, Integer>> sortedEntriesReversed = new TreeSet<Map.Entry<String, Integer>>(Map.Entry.comparingByValue(Comparator.reverseOrder()));
        sortedEntriesReversed.addAll(sortedEntries);// реверс порядка чтоб наиболее популярное слово было вначале


//Вывод слов по убыванию популярности-----------------------------------------------------------------------------------
        System.out.println("Самые популярные слова с тексте: " + '\n');
        for (Map.Entry<String, Integer> item : sortedEntriesReversed) {
            if (item.getKey() != null) {
                System.out.println("слово " + "(" + item.getKey() + ")" + " встречается в тексте " + item.getValue() + " раз;");
            }
        }


//Подсчет символов в тексте:--------------------------------------------------------------------------------------------
        String text1 = text.replaceAll("\\.|—|\\d|\"|\\,|\\(|\\)|\\?|\\!|\\;", "");//заменяю знаки на пустоту чтоб остались только слова с пробелами
        //System.out.println("слитые буквы "+text1);
        for (String item : text1.split(" ")) {//делю текст на слова по признаку "пробел"
            charCounter = charCounter + item.length();// складываю длину каждого слова
            spaceCounter++;//инкремент колличества пробелов после каждого слова
        }
        spaceCounter = spaceCounter - 1;//отнимаю последний пробел
        charCounter = charCounter + spaceCounter;//складываю длины слов с колличеством пробелов
        System.out.println('\n' + "колличество букв в тексте " + charCounter + ";");
//----------------------------------------------------------------------------------------------------------------------


//Вывод текста в обратном порядке--------------------------------------------------------------------------------------

        List<String> listText = new ArrayList<>();
        for (String item : text1.split(" ")
        ) {
            listText.add(item);
        }
        Collections.reverse(listText);
        String text3 = "";
        for (String item : listText
        ) {
            text3 = text3 + " " + item;
        }
        System.out.println('\n' + "Вывод текста в обратном порядке : " + '\n' + '\n' + text3);
//------------------------------------------------------------------------------------------------------------------------

        return out;
    }

    public static void main(String[] args) {

        compute("БИЛЛА все знали как доброго, умного и сильного человека, который очень любил свою семью. Но еще в молодые годы он начал курить. Позже он возненавидел эту привычку. Когда он пускал клубы дыма, то искренне призывал сыновей не курить, говоря, как глуп был в свое время. Бывало, он сминал пачку сигарет в своей сильной руке и, бросая ее на пол, клялся завязать с курением. Но вскоре его снова тянуло к табаку, и он продолжал курить — сначала тайком, затем открыто. Билл умер от рака 15 лет назад, перед этим несколько месяцев промучившись от страшных болей. Если бы он не курил, то, возможно, жил бы и по сей день. Его жена не лишилась бы мужа, а дети — отца. Смерть Билла стала ужасным горем для его семьи, но подобных случаев немало. По данным Всемирной организации здравоохранения (ВОЗ), каждый год от болезней, связанных с табаком, умирают четыре миллиона человек, или один человек каждые восемь секунд. Во всем мире курение становится одной из главных причин смерти, которую можно было предотвратить. Если так будет продолжаться и дальше, то через 20 лет курение станет основной причиной смерти и инвалидности во всем мире и будет уносить больше жизней, чем СПИД, туберкулез, материнская смертность, дорожно-транспортные происшествия, убийства и самоубийства вместе взятые. Курение несет смерть. И все же оно повсеместно распространено. По сведениям ВОЗ, во всем мире не менее 1,1 миллиарда человек курят — это примерно одна треть взрослого населения планеты. По мнению некоторых обозревателей, табачные компании сегодня затрачивают сотни миллионов долларов в связи с ведущимися против них судебными процессами, но эти деньги ничто по сравнению с баснословной прибылью, которую приносит им табачный бизнес. В одних только Соединенных Штатах каждый день сходит с конвейера приблизительно 1,5 миллиарда сигарет. Во всем мире частные табачные компании и государственные монополии продают более пяти триллионов сигарет каждый год! Почему же столь многие упорно продолжают курить это смертоносное зелье? Если вы курите, то как вам бросить? Ответы вы найдете в следующих статьях.")
        ;

    }
}

